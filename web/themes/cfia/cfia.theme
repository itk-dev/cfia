<?php

use Drupal\file\Entity\File;
use Drupal\Core\Config;
use Drupal\image\Entity\ImageStyle;
use Drupal\Core\Url;
use Drupal\node\Entity\Node;


/**
 * Implements hook_preprocess_page()
 *
 * @param $variables
 *
 * @throws \Drupal\Core\Entity\EntityMalformedException
 */
function cfia_preprocess_page (&$variables) {
  // Fetch cfia config settings.
  $config = \Drupal::config('cfia_base.settings');

  // Frontpage variables for page template.
  if (isset($config) && $variables['is_front'] == TRUE) {
    // Fetch header top file.
    $top_image_id = $config->get('cfia_frontpage.frontpage_image');
    $file = ($top_image_id) ? File::load($top_image_id) : FALSE;
    // Set variables
    $variables['front_title'] = $config->get('cfia_frontpage.frontpage_title');
    $variables['front_lead'] = $config->get('cfia_frontpage.frontpage_lead');
    $variables['front_sub'] = $config->get('cfia_frontpage.frontpage_sub');
    $variables['front_button_text'] = $config->get('cfia_frontpage.frontpage_button');
    $variables['front_button_link'] = $config->get('cfia_frontpage.frontpage_link');
    $variables['front_image'] = ($file) ? Url::fromUri(file_create_url($file->getFileUri()))->toString() : 'sites/all/themes/cfia/images/header-background.jpg';

    $frontpage_node_ref_id = $config->get('cfia_frontpage.frontpage_node_reference');
    if (!is_null($frontpage_node_ref_id)) {
      $frontpage_node = Node::load($frontpage_node_ref_id);
    }
    $variables['front_node'] = isset($frontpage_node) ? \Drupal::entityTypeManager()->getViewBuilder('node')->view($frontpage_node, 'frontpage_display') : FALSE;
  }

  // Footer variables for page template.
  if (isset($config)) {
    $variables['footer_text'] = check_markup($config->get('cfia_footer.footer_text'), 'filtered_html');
    $variables['footer_twitter'] = $config->get('cfia_footer.footer_twitter');
    $variables['footer_instagram'] = $config->get('cfia_footer.footer_instagram');
    $variables['footer_linkedin'] = $config->get('cfia_footer.footer_linkedin');
  }
}

/**
 * Implements hook_preprocess_node().
 *
 * Calls node type specific preprocess functions, e.g. "dokk_preprocess_node_event" for nodes of type event.
 *
 */

function cfia_preprocess_node(&$variables) {
  // Setup specific preprocess functions based on node type.
  $function = __FUNCTION__ . '_'. $variables['node']->getType();

  // Call function.
  if (function_exists($function)) {
    $function($variables);
  }
}

/**
 * Implements hook_preprocess_field().
 *
 * Enable preprocess function for specific fields.
 */
function cfia_preprocess_field(&$variables) {
  $function = __FUNCTION__ . '__' . $variables['element']['#field_name'];

  if (function_exists($function)) {
    $function($variables);
  }
}


/**
 * Implements hook_preprocess_field__().
 *
 * Enable preprocess function for specific fields.
 */
function cfia_preprocess_field__field_title(&$variables) {
  if ($variables['entity_type'] == 'paragraph' && $variables['element']['#object']->hasField('field_link')) {
    $variables['is_paragraph_field'] = TRUE;
    $field_link = $variables['element']['#object']->get('field_link')->getValue();
    if (isset($field_link['0'])) {
      $url = Url::fromUri($variables['element']['#object']->get('field_link')->getValue()['0']['uri']);
      $variables['paragraph_link'] = $url;
    }
  }
}


/**
 * Implements hook_preprocess_field__().
 *
 * Enable preprocess function for specific fields.
 */
function cfia_preprocess_field__field_image(&$variables) {
  if ($variables['entity_type'] == 'paragraph' && $variables['element']['#object']->hasField('field_link')) {
    $variables['is_paragraph_field'] = TRUE;
    $field_link = $variables['element']['#object']->get('field_link')->getValue();
    if (isset($field_link['0'])) {
      $url = Url::fromUri($variables['element']['#object']->get('field_link')->getValue()['0']['uri']);
      $variables['paragraph_link'] = $url;
    }
  }
}

/**
 * Implements hook_preprocess_field__().
 *
 * Enable preprocess function for specific fields.
 */
function cfia_preprocess_field__field_iframe(&$variables) {
  $variables['unformatted_iframe'] = strip_tags($variables['items']['0']['content']['#context']['value'], '<iframe>');
}

/**
 * Implements hook_preprocess_node__type().
 */
function cfia_preprocess_node_event(&$variables) {
  // Set timezone UTC to properly create format.
  $DateTimeZoneUTC = new DateTimeZone('UTC');

  // Create start and end time php object.
  $startDateTime = DateTime::CreateFromFormat('Y-m-d\TH:i:s', $variables['node']->field_starttime->value, $DateTimeZoneUTC);
  $endDateTime = DateTime::CreateFromFormat('Y-m-d\TH:i:s', $variables['node']->field_endtime->value, $DateTimeZoneUTC);

  // Set time and date based on object in timestamp format.
  $variables['eventdate'] = \Drupal::service('date.formatter')->format(date('U', $startDateTime->getTimestamp()), 'custom', 'l j. F Y');
  $variables['eventstarttime'] = \Drupal::service('date.formatter')->format(date('U', $startDateTime->getTimestamp()), 'custom', 'G:i');
  $variables['eventendtime'] = \Drupal::service('date.formatter')->format(date('U', $endDateTime->getTimestamp()), 'custom', 'G:i');

}

/**
 * Implements hook_preprocess_node__type().
 */
function cfia_preprocess_node_pdf(&$variables) {
  // Get pdf path.
  $variables['pdfpath'] = $variables['elements']['field_pdf']['0']['#file']->url();

  // Get image url
  if (isset($variables['elements']['field_related_page_image']['0'])) {
    $image_id = $variables['elements']['field_related_page_image']['0']['#item']->getValue();
    $file = File::load($image_id['target_id']);
    $variables['image_url'] = ImageStyle::load('related_page_image')->buildUrl($file->getFileUri());
  }
}

/**
 * Implements hook_preprocess_views_view_unformatted().
 *
 * @param $variables
 */
function cfia_preprocess_views_view_unformatted(&$variables) {
  // Get view id.
  $id = $variables['view']->id();

  if ($id == 'cfia_frontpage_news' || $id == 'cfia_frontpage_events') {
    // Fetch cfia config settings.
    $config = \Drupal::config('cfia_base.settings');
    $variables['news_sub'] = check_markup($config->get('cfia_news.news_sub'), 'filtered_html');
  }
}
